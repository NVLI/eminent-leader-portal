<?php

/**
 * @file
 * Contains custom_solr_search.module..
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Solarium\QueryType\Select\Query\Query as SelectQuery;

/**
 * Implements hook_help().
 */
function custom_solr_search_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the custom_solr_search module.
    case 'help.page.custom_solr_search':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Custom Solr Search') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_theme().
 */
function custom_solr_search_theme($existing, $type, $theme, $path) {
  return array (
    'custom_solr_search_result' => array(
      'variables' => array(
        'url' => NULL,
        'docid' => NULL,
        'title' => NULL,
        'author' => NULL,
        'publishDate' => NULL,
        'publisher' => NULL,
        'topic' => NULL,
      ),
      'path' => $path . '/templates',
      'template' => 'custom-solr-search-result',
    ),
    'custom_solr_search_facet' => array(
      'variables' => array(
        'facets' => NULL,
      ),
      'path' => $path . '/templates',
      'template' => 'custom-solr-search-facet',
    ),
    'custom_solr_search_facet_applied' => array(
      'variables' => array(
        'facets' => NULL,
      ),
      'path' => $path . '/templates',
      'template' => 'custom-solr-search-facet-applied',
    ),
  );
}

/**
 * Get url components
 *
 * @param string $component
 *   If defined only that component will be returned.
 *
 * @return array
 */
function custom_solr_search_get_url_components($component = NULL) {
  $url = $_SERVER['REQUEST_URI'];
  $url_array = explode('?', $url);
  $url_components['path'] = $url_array[0];
  $url_components['facet_query'] = [];
  $url_components['rm_facet_query'] = [];
  if (isset($url_array[1])) {
    $url_array = explode('&', $url_array[1]);
    foreach ($url_array as $params) {
      if (preg_match('/^_facet_.*/', $params)) {
        $params = str_replace('=', ':"', str_replace('_facet_', '', $params)) . '"';
        $url_components['facet_query'][] = $params;
      }
      elseif (preg_match('/^_rm_facet_.*/', $params)) {
        $params = str_replace('=', ':"', str_replace('_rm_facet_', '', $params)) . '"';
        $url_components['rm_facet_query'][] = $params;
      }
    }
  }
  if ($component) {
    return $url_components[$component];
  }
  return $url_components;
}

function custom_solr_search_get_facet_field_settings() {
  $facetFields = array(
    'Institution' => 'institution',
    'Library' => 'building',
    'Format' => 'format',
    'Call-Number' => 'callnumber-first',
    'Author' => 'author_facet',
    'Language' => 'language',
    'Genre' => 'genre',
    'Era' => 'era',
    'Region' => 'geographic',
    'Year-of-Publication' => 'publishDate',
  );

  $facetFieldsConfig = \Drupal::service('custom_solr_search.facet_config')->getFacetQuery('nvli')['fields'];
  
  if (!empty($facetFieldsConfig)) {
    $facetFields = $facetFieldsConfig;
  }

  return $facetFields;
}

function custom_solr_search_set_facet_filter(&$query, $facet_filter) {
  $fq = custom_solr_search_get_facet_filter_query_string($facet_filter);
  if ($fq) {
    $query->createFilterQuery('fq')->setQuery($fq);
  }
}

function custom_solr_search_get_facet_filter_query_string($facet_filter) {
  foreach ($facet_filter as $filter) {
    if (isset($fq)) {
      $fq .= ' AND ' . urldecode($filter);
    }
    else {
      $fq = urldecode($filter);
    }
  }
  return $fq;
}

function custom_solr_search_remove_url_pager($url) {
  $url = trim(preg_replace('/&?page=[0-9]+&?/', '', $url), '?&');
  return $url;
}
