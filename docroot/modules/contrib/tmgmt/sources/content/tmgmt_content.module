<?php

/**
 * @file
 * Source plugin for the Translation Management system that handles entities.
 */

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Entity\Plugin\DataType\EntityReference;
use Drupal\Core\Form\FormStateInterface;
use Drupal\tmgmt\JobInterface;
use Drupal\field\FieldStorageConfigInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\ContentEntityInterface;

/**
 * Implements hook_tmgmt_source_suggestions().
 */
function tmgmt_content_tmgmt_source_suggestions(array $items, JobInterface $job) {
  $suggestions = array();

  foreach ($items as $item) {
    if ($item instanceof \Drupal\tmgmt\JobItemInterface && $item->getPlugin() == 'content') {
      // Load the entity and extract the bundle name to get all fields from the
      // current entity.
      $entity = entity_load($item->getItemType(), $item->getItemId());

      // Load translatable menu items.
      $menu_link_manager = \Drupal::service('plugin.manager.menu.link');
      $entity_type = $entity->getEntityType()->id();
      $menu_items = $menu_link_manager->loadLinksByRoute(
        'entity.' . $entity_type . '.canonical',
        array($entity_type => $entity->id())
      );
      if (!empty($menu_items)) {
        foreach ($menu_items as $menu_item) {
          $target = \Drupal::entityManager()->loadEntityByUuid($menu_item->getBaseId(), $menu_item->getDerivativeId());
          $suggestions[] = array(
            'job_item' => tmgmt_job_item_create('content', $menu_item->getBaseId(), $target->id()),
            'reason' => t('Menu item @label', array('@label' => $target->label())),
            'from_item' => $item->id(),
          );
        }
      }

      // Loop over all fields, check if they are NOT translatable. Only if a
      // field is not translatable we may suggest a referenced entity.
      $content_translation_manager = \Drupal::service('content_translation.manager');
      foreach ($entity as $field) {
        /* @var \Drupal\Core\Field\FieldItemListInterface $field */
        $definition = $field->getFieldDefinition();

        if (!$definition->isTranslatable()) {
          continue;
        }

        // Loop over all field items.
        foreach ($field as $field_item) {
          // Loop over all properties of a field item.
          foreach ($field_item->getProperties(TRUE) as $property) {
            if ($property instanceof EntityReference && $target = $property->getValue()) {
              $enabled = $content_translation_manager->isEnabled($target->getEntityTypeId(), $target->bundle());
              if ($enabled) {
                // Add the translation as a suggestion.
                $suggestions[] = array(
                  'job_item' => tmgmt_job_item_create('content', $target->getEntityTypeId(), $target->id()),
                  'reason' => t('Field @label', array('@label' => $definition->getLabel())),
                  'from_item' => $item->id(),
                );
              }
            }
          }
        }
      }
    }
  }

  return $suggestions;
}

  /**
   * Implements hook_form_FORM_ID_alter() for tmgmt_settings_form().
   *
   * @param array $form
   * @param \Drupal\Core\Form\FormStateInterface $form_state
   */
function tmgmt_content_form_tmgmt_settings_form_alter(array &$form, FormStateInterface $form_state) {
  module_load_include('inc', 'views', 'views.views');
  $entity_types = \Drupal::entityManager()->getDefinitions();

  $form['content']['embedded_fields'] = array(
    '#type' => 'details',
    '#title' => t('Embedded references'),
    '#description' => t('All checked reference fields will automatically add the translatable data of the reference to the job. This is only available when the reference is untranslatable and the target is enabled for translation.'),
    '#tree' => TRUE,
    '#open' => TRUE,
  );

  $content_translation_manager = \Drupal::service('content_translation.manager');

  $always_embedded = [];
  foreach ($entity_types as $entity_type) {
    if ($content_translation_manager->isEnabled($entity_type->id())) {
      $field_options = array();
      $translatable_bundles = array_filter(array_keys(\Drupal::entityManager()->getBundleInfo($entity_type->id())), function ($bundle) use ($entity_type, $content_translation_manager) {
        return $content_translation_manager->isEnabled($entity_type->id(), $bundle);
      });
      $storage_definitions = \Drupal::entityManager()->getFieldStorageDefinitions($entity_type->id());

      foreach ($storage_definitions as $field_name => $storage_definition) {
        // Filter out storage definitions that don't have at least one
        // untranslatable field definition on a translatable bundle.
        $allowed_option = FALSE;
        foreach ($translatable_bundles as $bundle) {
          $field_definitions = \Drupal::entityManager()->getFieldDefinitions($entity_type->id(), $bundle);
          if (isset($field_definitions[$field_name]) && !$field_definitions[$field_name]->isTranslatable()) {
            $allowed_option = TRUE;
            break;
          }
        }

        if (!$allowed_option) {
          continue;
        }

        $property_definitions = $storage_definition->getPropertyDefinitions();
        foreach ($property_definitions as $property_definition) {
          // Look for entity_reference properties where the storage definition
          // has a target type setting and that is enabled for content
          // translation.
          // @todo Support dynamic entity references and make this more flexible
          //   in general.
          if (in_array($property_definition->getDataType(), ['entity_reference', 'entity_revision_reference']) && $storage_definition->getSetting('target_type') && $content_translation_manager->isEnabled($storage_definition->getSetting('target_type'))) {
            if ($storage_definition instanceof FieldStorageConfigInterface) {
              list($label) = views_entity_field_label($entity_type->id(), $storage_definition->getName());
              // Entity types with this key set are considered composite
              // entities and always embedded in others. Do not expose them as
              // their own item type.
              $target_entity_type = \Drupal::entityTypeManager()->getDefinition($storage_definition->getSetting('target_type'));
              if ($target_entity_type->get('entity_revision_parent_type_field')) {
                $id = str_replace('.', '_', $storage_definition->id());
                $always_embedded[$id] = $entity_type->getLabel() . ': ' . $label;
              }
              else {
                $field_options[$storage_definition->getName()] = $label;
              }
            }
            else {
              $field_options[$storage_definition->getName()] = $storage_definition->getLabel();
            }
            break;
          }
        }
      }
      if (!empty($field_options)) {
        if (\Drupal::config('tmgmt_content.settings')->get('embedded_fields.' . $entity_type->id())) {
          $form['content']['embedded_fields'][$entity_type->id()] = array(
            '#type' => 'checkboxes',
            '#title' => $entity_type->getLabel(),
            '#options' => $field_options,
            '#default_value' => array_keys(\Drupal::config('tmgmt_content.settings')->get('embedded_fields.' . $entity_type->id())),
          );
        }
        else {
          $form['content']['embedded_fields'][$entity_type->id()] = array(
            '#type' => 'checkboxes',
            '#title' => $entity_type->getLabel(),
            '#options' => $field_options,
          );
        }

      }
    }
  }
  if (!empty($always_embedded)) {
    $form['content']['embedded_fields']['always_embedded'] = array(
      '#type' => 'item',
      '#title' => t('Always embedded'),
      '#description' => t('These references are always embedded in the translatable data.'),
      '#description_display' => 'after',
      'list' => array(
        '#theme' => 'item_list',
        '#items' => $always_embedded,
      ),
    );
  }

  $form['#submit'][] = 'tmgmt_content_settings_submit';
}

/**
 * Submit function set by tmgmt_content_form_tmgmt_settings_form_alter().
 */
function tmgmt_content_settings_submit(array &$form, FormStateInterface $form_state) {
  $embedded_fields = array();
  foreach ($form_state->getValue('embedded_fields', []) as $key => $fields) {
    foreach (array_filter($fields) as $id => $label) {
      $embedded_fields[$key][$id] = TRUE;
    }
  }

  \Drupal::configFactory()->getEditable('tmgmt_content.settings')
    ->set('embedded_fields', $embedded_fields)
    ->save();
}

/**
 * Implements hook_entity_insert().
 */
function tmgmt_content_entity_insert(EntityInterface $entity) {
  if ($entity instanceof ContentEntityInterface) {
    tmgmt_content_create_continuous_job_items($entity);
  }
}

/**
 * Implements hook_entity_update().
 */
function tmgmt_content_entity_update(EntityInterface $entity) {
  if ($entity instanceof ContentEntityInterface && $entity->isTranslatable()) {
    $entity = $entity->getUntranslated();
    $source_langcode = $entity->language()->getId();
    $current_job_items = tmgmt_job_item_load_latest('content', $entity->getEntityTypeId(), $entity->id(), $source_langcode);
    if ($current_job_items) {
      /** @var \Drupal\tmgmt\JobItemInterface $job_item */
      foreach ($current_job_items as $job_item) {
        // If the job item is not yet submitted update its data.
        if ($job_item->getJob()->isSubmittable() || $job_item->isInactive()) {
          $job_item->resetData();
          $job_item->addMessage('Updated source data.');
        }
        elseif ($job_item->getJob()->isContinuous()) {
          $continuous_manager = \Drupal::service('tmgmt.continuous');
          $continuous_manager->addItem($job_item->getJob(), 'content', $entity->getEntityTypeId(), $entity->id());
        }
      }
    }
    tmgmt_content_create_continuous_job_items($entity);
  }
}

/**
 * Creates continuous job items for entity.
 *
 * @param \Drupal\Core\Entity\ContentEntityInterface $entity
 *   Entity to be inserted or updated.
 *
 * @return int
 *   Number of created continuous job items.
 */
function tmgmt_content_create_continuous_job_items(ContentEntityInterface $entity) {
  $job_items_count = 0;
  $entity = $entity->getUntranslated();
  $source_langcode = $entity->language()->getId();
  $content_translation_manager = \Drupal::service('content_translation.manager');
  if ($content_translation_manager->isEnabled($entity->getEntityTypeId(), $entity->bundle())) {
    $continuous_manager = \Drupal::service('tmgmt.continuous');
    $jobs = $continuous_manager->getContinuousJobs($source_langcode);
    foreach ($jobs as $job) {
      if ($continuous_manager->addItem($job, 'content', $entity->getEntityTypeId(), $entity->id())) {
        $job_items_count++;
      }
    }
  }
  return $job_items_count;
}

/**
 * Creates continuous job items for entity.
 *
 * Batch callback function.
 */
function tmgmt_content_create_continuous_job_items_batch_finished($success, $results, $operations) {
  if ($success) {
    if ($results['job_items'] !== 0) {
      drupal_set_message(\Drupal::translation()->formatPlural($results['job_items'], '1 continuous job item has been created.', '@count continuous job items have been created.'));
    }
    else {
      drupal_set_message(t('None of the selected sources can be added to continuous jobs.'), 'warning');
    }
  }
  else {
    // An error occurred.
    $error_operation = reset($operations);
    $message = t('An error occurred while processing %error_operation with arguments: @arguments', array(
      '%error_operation' => $error_operation[0],
      '@arguments' => print_r($error_operation[1], TRUE),
    ));
    drupal_set_message($message, 'error');
  }

}

/**
 * Implements hook_entity_access().
 */
function tmgmt_content_entity_access(\Drupal\Core\Entity\EntityInterface $entity, $operation, \Drupal\Core\Session\AccountInterface $account) {
  $result = AccessResult::neutral();
  $key = \Drupal::request()->query->get('key');
  if ($entity instanceof ContentEntityInterface && $operation == 'view' && $key) {
    $entity = $entity->getUntranslated();
    $source_langcode = $entity->language()->getId();
    $current_job_items = tmgmt_job_item_load_latest('content', $entity->getEntityTypeId(), $entity->id(), $source_langcode);
    /** @var \Drupal\tmgmt\JobItemInterface $job_item */
    if ($current_job_items) {
      foreach ($current_job_items as $job_item) {
        $valid_key = \Drupal::service('tmgmt_content.key_access')
          ->getKey($job_item);
        if ($key === $valid_key && \Drupal::config('tmgmt.settings')->get('anonymous_access')) {
          $result = AccessResult::allowed();
        }
        $result->addCacheableDependency($job_item);
      }
      $result->addCacheableDependency(\Drupal::config('tmgmt.settings'));
    }
  }
  return $result->addCacheContexts(['url.query_args:key']);
}
