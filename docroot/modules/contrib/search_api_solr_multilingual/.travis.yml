language: php
cache:
  bundler: true
  directories:
    - $HOME/tmp/drush
    - $HOME/.bundle
    - $HOME/.composer
  apt: true

git:
 depth: 10000

php:
#  - 5.5
  - 5.6
  - 7.0

# This creates a build with each php environment. 6 builds in total.
env:
  - PATH=$PATH:/home/travis/.composer/vendor/bin SOLR_VERSION=4.5.1 SOLR_CORE=d8 SOLR_CONFS="$TRAVIS_BUILD_DIR/../drupal/web/modules/search_api_solr/solr-conf/4.x"
  - PATH=$PATH:/home/travis/.composer/vendor/bin SOLR_VERSION=5.5.1 SOLR_CORE=d8 SOLR_CONFS="$TRAVIS_BUILD_DIR/../drupal/web/modules/search_api_solr/solr-conf/5.x"
  - PATH=$PATH:/home/travis/.composer/vendor/bin SOLR_VERSION=6.0.1 SOLR_CORE=d8 SOLR_CONFS="$TRAVIS_BUILD_DIR/../drupal/web/modules/search_api_solr/solr-conf/6.x"

# notifications:
#  irc:
#    - "chat.freenode.net#drupal-search-api"

# This will create the database
mysql:
  database: drupal
  username: root
  encoding: utf8

# To be able to run a webbrowser
# If we need anything more powerful
# than e.g. phantomjs
before_install:
  - phpenv config-rm xdebug.ini
  - composer self-update
  - sudo apt-get update -qq > /dev/null
  - "export DISPLAY=:99.0"
  - "sh -e /etc/init.d/xvfb start"

install:
  - git tag 999.0.0
  # Make sure we don't fail when checking out projects
  - echo -e "Host github.com\n\tStrictHostKeyChecking no\n" >> ~/.ssh/config
  - echo -e "Host git.drupal.org\n\tStrictHostKeyChecking no\n" >> ~/.ssh/config
  # Set sendmail so drush doesn't throw an error during site install.
  - echo "sendmail_path='true'" >> `php --ini | grep "Loaded Configuration" | awk '{print $4}'`
  # Forward the errors to the syslog so we can print them
  - echo "error_log=syslog" >> `php --ini | grep "Loaded Configuration" | awk '{print $4}'`
  # Get latest Drupal 8 core
  - git clone --branch 8.x https://github.com/drupal-composer/drupal-project.git $TRAVIS_BUILD_DIR/../drupal
  # Re-enable when trying to get CodeSniffer doesn't return a 403 anymore.
  # - composer global require drupal/coder:\>7

before_script:
  - cd $TRAVIS_BUILD_DIR/../drupal
  - composer config repositories.search_api_solr_multilingual vcs $TRAVIS_BUILD_DIR
  - composer config repositories.search_api_solr              vcs https://github.com/mkalkbrenner/search_api_solr.git
  - composer require --no-update drupal/search_api_solr_multilingual:999.0.0 drupal/search_api:dev-8.x-1.x drupal/search_api_solr:dev-8.x-1.x drupal/facets:dev-8.x-1.x
  - cat composer.json
  - composer install --no-progress
  - cd web
  # start the built-in php web server (mysql is already started)
  - php -S localhost:8888 &
  # Install the site
  - mv modules/contrib/search_api modules/search_api
  - mv modules/contrib/search_api_solr modules/search_api_solr
  - mv modules/contrib/search_api_solr_multilingual modules/search_api_solr_multilingual
  - ../vendor/bin/drush -v site-install minimal --db-url=mysql://root:@localhost/drupal --yes
  - ../vendor/bin/drush en --yes simpletest
  # Generate a multilingual Solr configuration.
  # Therefore we have to install the test modules before the tests.
  - cp -R core/modules/system/tests/modules/entity_test core/modules/system/entity_test
  - cp -R modules/search_api/tests/search_api_test_example_content modules/search_api/search_api_test_example_content
  - cp -R modules/search_api_solr_multilingual/tests/modules/search_api_solr_multilingual_test modules/search_api_solr_multilingual/search_api_solr_multilingual_test
  - ../vendor/bin/drush en --yes search_api_solr_multilingual_test
  - ../vendor/bin/drush sasm-gsc solr_multilingual_search_server conf.zip $SOLR_VERSION
  - unzip -o conf.zip -d $SOLR_CONFS
  - ls -lh $SOLR_CONFS
  # Install Solr
  - cat modules/search_api_solr/travis-solr.sh | bash

script:
  # Run the tests
  - cd $TRAVIS_BUILD_DIR/../drupal/web/
  - export SIMPLETEST_DB=mysql://root:@localhost/drupal
  - php core/scripts/run-tests.sh --verbose --color --concurrency 4 --php `which php` --url http://localhost:8888 --class "\Drupal\search_api_solr_multilingual\Tests\IntegrationTest" | tee /tmp/test.txt ; export TEST_EXIT=${PIPESTATUS[0]} ; echo $TEST_EXIT
  # Check if we had fails in the run-tests.sh script
  # Exit with the inverted value, because if there are no fails found, it will exit with 1 and for us that\
  # is a good thing so invert it to 0. Travis has some issues with the exclamation mark in front so we have to fiddle a
  # bit.
  # Also make the grep case insensitive and fail on run-tests.sh regular fails as well on fatal errors.
  - TEST_OUTPUT=$(! egrep -i "([0-9]+ fails)|(Fatal erro)|([0-9]+ exceptions)" /tmp/test.txt > /dev/null)$?
  - cd $TRAVIS_BUILD_DIR/../drupal/web/
  - ./../vendor/bin/phpunit -c core --group search_api_solr_multilingual --verbose --debug | tee ; export TEST_PHPUNIT=${PIPESTATUS[0]} ; echo $TEST_PHPUNIT
  #- ./vendor/bin/phpunit --group search_api_solr_multilingual -c "../modules/search_api_solr/phpunit.xml.travis" --verbose --debug --coverage-text | tee ; export TEST_PHPUNIT=${PIPESTATUS[0]} ; echo $TEST_PHPUNIT
  # if the TEST_EXIT status is 0 AND the TEST_OUTPUT status is also 0 it means we succeeded, in all other cases we
  # failed.
  # Re-enable when trying to get CodeSniffer doesn't return a 403 anymore.
  #- /home/travis/.composer/vendor/bin/phpcs --standard=/home/travis/.composer/vendor/drupal/coder/coder_sniffer/Drupal --extensions=php,inc,test,module,install --ignore=css/ $TRAVIS_BUILD_DIR/../drupal/modules/search_api_multilingual
  - php -i | grep 'php.ini'
  # Exit the build
  - echo $TEST_EXIT
  - echo $TEST_OUTPUT
  - echo $TEST_PHPUNIT
  - if [ $TEST_EXIT -eq 0 ] && [ $TEST_OUTPUT -eq 0 ] && [ $TEST_PHPUNIT -eq 0 ]; then exit 0; else exit 1; fi
