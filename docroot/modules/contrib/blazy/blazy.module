<?php

/**
 * @file
 * Provides basic Blazy integration for lazy loading and multi-serving images.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Component\Serialization\Json;
use Drupal\blazy\Blazy;

/**
 * Implements hook_theme().
 */
function blazy_theme() {
  return ['blazy' => ['render element' => 'element']];
}

/**
 * Prepares variables for blazy.html.twig templates.
 */
function template_preprocess_blazy(&$variables) {
  Blazy::buildAttributes($variables);
}

/**
 * Overrides variables for responsive-image.html.twig templates.
 */
function blazy_preprocess_responsive_image(&$variables) {
  // Do not proceed if picture element.
  if (!$variables['output_image_tag']) {
    return;
  }

  $config = Blazy::getConfig();

  // Do not proceed if disabled globally, or not a Blazy formatter.
  if (!$config['responsive_image'] || !isset($variables['attributes']['data-srcset'])) {
    return;
  }

  // We are here either using Blazy, or core Responsive image formatters.
  $srcset = $variables['attributes']['srcset'];
  $srcset_values = $srcset->value();

  $variables['attributes']['data-srcset'] = $srcset_values;
  $variables['img_element']['#attributes']['class'][] = 'b-lazy b-responsive';
  $variables['img_element']['#attributes']['data-srcset'] = $srcset_values;
  $variables['img_element']['#attributes']['srcset'] = '';

  $variables['img_element']['#attributes']['data-src'] = $variables['img_element']['#uri'];
  if ($config['one_pixel']) {
    $variables['img_element']['#uri'] = Blazy::PLACEHOLDER;
  }

  $variables['img_element']['#attached']['drupalSettings']['blazy'] = $config['blazy'];
}

/**
 * Implements hook_preprocess_field().
 */
function blazy_preprocess_field(array &$variables) {
  $element = $variables['element'];

  // Only proceed if an image field and using Blazy formatter.
  if (!isset($element['#blazy'])) {
    return;
  }

  // Defines [data-blazy] attribute as required by the Blazy loader.
  $settings = $element['#blazy'];
  if (!empty($settings['responsive_image_style'])) {
    $settings['ratio'] = FALSE;
  }

  $settings['blazy_data']['ratio'] = !empty($settings['ratio']);
  $variables['attributes']['class'][] = 'blazy';
  $variables['attributes']['data-blazy'] = Json::encode($settings['blazy_data']);
}

/**
 * Implements hook_config_schema_info_alter().
 */
function blazy_config_schema_info_alter(array &$definitions) {
  Blazy::configSchemaInfoAlter($definitions, 'blazy_base');
}

/**
 * Implements hook_library_info_alter().
 */
function blazy_library_info_alter(&$libraries, $extension) {
  if ($extension === 'blazy' && function_exists('libraries_get_path')) {
    $libraries['blazy']['js'] = ['/' . libraries_get_path('blazy') . '/blazy.min.js' => []];
  }
}

/**
 * Implements hook_help().
 */
function blazy_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.blazy':
      return check_markup(file_get_contents(dirname(__FILE__) . '/README.txt'));
  }
}
